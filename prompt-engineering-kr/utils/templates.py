"""
프롬프트 템플릿 모듈

각 챕터에서 공통적으로 사용할 수 있는 기본 프롬프트 템플릿을 제공합니다.
"""

# 학업 기본 템플릿
ACADEMIC_TEMPLATES = {
    # 1.1 리포트 품질 향상 기법
    "topic_analysis": """
당신은 {field} 분야의 학술 전문가입니다. 다음 주제에 대한 학술적 분석을 제공해주세요:

주제: {topic}

다음 내용을 포함해주세요:
1. 주제의 핵심 개념 및 중요성
2. 주요 논점 (최소 3가지)
3. 각 논점에 대한 간략한 설명
4. 연구/에세이를 위한 가능한 접근 방법
5. 주요 참고문헌 추천 (3-5개)

마크다운 형식으로 응답해주세요.
""",

    "logical_structure": """
다음 주제와 논점을 바탕으로 {report_type} 형식의 리포트 구조를 설계해주세요:

주제: {topic}
주요 논점:
{key_points}

각 섹션에 포함되어야 할 내용을 구체적으로 설명하고, 
논리적 흐름과 연결성을 강화할 방법을 제안해주세요.
인용 및 참고문헌 활용에 대한 조언도 포함해주세요.
""",

    "citation_optimization": """
당신은 학술 출판 및 인용 전문가입니다.
{citation_style} 인용 스타일에 맞게 다음 자료의 인용 정보를 최적화해주세요:

자료 정보:
{reference_info}

다음 내용을 포함해주세요:
1. 올바른 형식의 인용문 (본문 내 인용 및 참고문헌 목록)
2. 이 자료를 효과적으로 인용하는 방법
3. 인용 시 주의사항
4. 표절을 피하는 팁
""",

    "professor_specific": """
당신은 학술 작문 컨설턴트입니다.
다음 교수 유형에 맞는 과제 작성 전략을 제공해주세요:

교수 유형: {professor_type}
과제 유형: {assignment_type}
학문 분야: {field}

다음 내용을 포함해주세요:
1. 이 유형의 교수가 중요시하는 핵심 요소
2. 과제 작성시 강조해야 할 점
3. 피해야 할 일반적인 실수
4. 평가에서 좋은 점수를 받기 위한 구체적인 전략
""",

    # 1.2 전공별 맞춤형 리포트 작성
    "field_specific_report": """
당신은 {field} 분야의 학술 작문 전문가입니다.
이 분야에 특화된 리포트 작성 가이드를 제공해주세요:

주제: {topic}
리포트 유형: {report_type}
길이: {length}

다음 내용을 포함해주세요:
1. {field} 분야에서 효과적인 리포트 구조
2. 이 분야에서 중요한 용어 및 개념
3. 자주 사용되는 증거 유형 및 제시 방법
4. 분야별 특화된 논증 방식
5. 이 분야 리포트의 일반적인 평가 기준
"""
}

# 프로그래밍 학습 템플릿
PROGRAMMING_TEMPLATES = {
    # 2.1 코딩 개념 이해 및 학습
    "concept_explanation": """
당신은 {language} 프로그래밍 교육 전문가입니다.
다음 개념을 {level} 수준의 학생이 이해할 수 있도록 설명해주세요:

개념: {concept}

설명에 포함할 내용:
1. 개념의 정의 및 목적
2. 실제 사용 예시 (간단한 코드 포함)
3. 관련된 다른 개념과의 관계
4. 일반적인 오해나 실수
5. 실제 프로그래밍에서의 활용 방법

{level} 수준에 맞게 설명하고, 코드 예시를 포함해주세요.
""",

    # 2.2 코딩 과제 해결 전략
    "code_task_analysis": """
당신은 프로그래밍 멘토입니다. 다음 코딩 과제의 해결 전략을 제시해주세요:

과제 설명:
{task_description}

프로그래밍 언어: {language}
수준: {level}

다음을 포함한 단계별 접근 방법을 제공해주세요:
1. 문제 분석 및 이해
2. 알고리즘 설계 (의사코드 포함)
3. 핵심 데이터 구조 선택 및 이유
4. 구현 시 주의사항
5. 테스트 방법

코드 전체를 바로 제공하지 말고, 학생이 스스로 생각할 수 있도록 안내해주세요.
""",

    # 2.3 코드 디버깅 및 개선
    "code_debugging": """
당신은 {language} 디버깅 전문가입니다. 다음 코드의 문제를 진단하고 해결책을 제안해주세요:

```{language}
{code}
```

오류 메시지 또는 문제 상황:
{error_description}

다음을 포함해주세요:
1. 발생한 문제의 진단
2. 오류의 근본 원인 설명
3. 해결 방법 (단계별 접근)
4. 수정된 코드 또는 수정 방향
5. 유사한 오류를 예방하기 위한 팁
""",

    # 2.4 프로젝트 기획 및 구조화
    "project_planning": """
당신은 소프트웨어 아키텍트입니다. 다음 프로젝트에 대한 설계 및 구조화 방안을 제안해주세요:

프로젝트 설명:
{project_description}

사용 기술: {technologies}
예상 규모: {scale}

다음 내용을 포함한 기획을 제공해주세요:
1. 전체 아키텍처 개요
2. 핵심 컴포넌트 및 모듈
3. 파일 및 디렉토리 구조 제안
4. 데이터 흐름 및 상태 관리 방안
5. 개발 및 협업 전략

구체적인 구현보다는 설계 원칙과 구조에 초점을 맞춰주세요.
"""
}

# 연구 및 데이터 분석 템플릿
RESEARCH_TEMPLATES = {
    # 3.1 연구 계획 및 설계
    "research_design": """
당신은 {field} 분야의 연구 방법론 전문가입니다.
다음 연구 주제에 대한 연구 계획을 설계해주세요:

연구 주제: {topic}
연구 목적: {purpose}
제약 조건: {constraints}

다음 내용을 포함해주세요:
1. 연구 질문 및 가설 제안
2. 적합한 연구 방법론 및 선택 이유
3. 데이터 수집 방법 및 표본 선정
4. 분석 방법 및 도구
5. 예상 결과 및 한계점
6. 연구 일정 제안

학술적으로 견고한 연구 계획을 마크다운 형식으로 제공해주세요.
""",

    # 3.2 데이터 분석 지원
    "data_analysis": """
당신은 데이터 분석 전문가입니다. 다음 데이터 세트 분석을 위한 접근 방법을 제안해주세요:

데이터 설명:
{data_description}

분석 목적:
{analysis_goals}

다음 내용을 포함해주세요:
1. 초기 데이터 탐색 단계 제안
2. 적합한 통계적 방법 및 선택 이유
3. 필요한 데이터 전처리 단계
4. 주요 분석 기법 및 활용 방법
5. 결과 해석 및 시각화 방안
6. 주의해야 할 잠재적 문제점
""",

    # 3.3 논문 작성 지원
    "paper_writing": """
당신은 학술 논문 작성 컨설턴트입니다. 다음 연구를 논문으로 작성하는 방법을 안내해주세요:

연구 주제: {topic}
연구 방법: {methodology}
주요 발견점: {findings}
대상 저널/학회: {target_venue}

다음 내용을 포함해주세요:
1. 효과적인 논문 구조 제안
2. 각 섹션별 작성 가이드
3. 주요 발견점 강조 방법
4. {target_venue}에 적합한 스타일 및 형식
5. 인용 및 참고문헌 관리 방법
6. 논문 개선을 위한 자가 검토 체크리스트
"""
}

# 취업 준비 템플릿
CAREER_TEMPLATES = {
    # 4.1 이력서 및 자기소개서
    "resume_writing": """
당신은 커리어 코치입니다. 다음 조건에 맞는 이력서 작성 가이드를 제공해주세요:

지원 분야: {field}
경력 수준: {experience_level}
주요 스킬: {skills}

다음 내용을 포함해주세요:
1. 해당 분야에 효과적인 이력서 구조
2. 주요 섹션별 작성 팁
3. 강조해야 할 핵심 역량 및 경험
4. 피해야 할 일반적인 실수
5. 차별화 전략
6. ATS(지원자 추적 시스템) 최적화 방법
""",

    "cover_letter": """
당신은 취업 컨설턴트입니다. 다음 조건에 맞는 자기소개서 작성 가이드를 제공해주세요:

지원 기업: {company}
지원 직무: {position}
지원자 배경: {background}

다음 내용을 포함해주세요:
1. 효과적인 자기소개서 구조
2. 지원 동기 작성법
3. 관련 경험 강조 방법
4. {company}의 가치와 연결하는 방법
5. 자기소개서 차별화 전략
6. 마무리 및 행동 유도 방법
""",

    # 4.3 면접 준비
    "interview_prep": """
당신은 면접 코치입니다. 다음 조건에 맞는 면접 준비 가이드를 제공해주세요:

지원 기업: {company}
지원 직무: {position}
면접 유형: {interview_type}

다음 내용을 포함해주세요:
1. 예상 질문 목록 (최소 10개)
2. 각 질문별 효과적인 답변 구조
3. STAR 기법을 활용한 경험 설명 방법
4. 지원자가 강조해야 할 핵심 역량
5. 면접관에게 할 좋은 질문 예시
6. 일반적인 실수 및 주의사항
"""
}

# 프롬프트 패턴 템플릿
PROMPT_PATTERN_TEMPLATES = {
    # 5.1 역할 기반 프롬프팅
    "role_prompting": """
당신은 {role_description}입니다. 다음 주제에 대해 {role}의 관점에서 분석해주세요:

주제: {topic}

다음 측면을 포함해주세요:
1. {role}로서의 전문적 견해
2. 이 주제에 대한 특별한 통찰력
3. 관련된 전문적 개념과 이론
4. 실제 적용 방법 및 사례
5. 일반적인 오해나 주의사항

{role}에 적합한 용어와 관점으로 응답해주세요.
""",

    # 5.2 단계적 사고 유도
    "chain_of_thought": """
다음 문제를 단계적 사고 과정을 통해 해결해주세요:

문제: {problem}

단계별로 사고 과정을 명확하게 보여주며 해결해주세요:
1. 문제 이해 및 주요 요소 파악
2. 가능한 접근 방법 검토
3. 선택한 방법의 논리적 전개
4. 중간 과정 및 계산
5. 최종 결론 도출

각 단계마다 "단계 X:" 형식으로 구분하여 사고 과정을 자세히 설명해주세요.
""",

    # 5.3 예시 기반 학습
    "few_shot_learning": """
다음은 {task_description}의 예시입니다:

예시 1:
입력: {example1_input}
출력: {example1_output}

예시 2:
입력: {example2_input}
출력: {example2_output}

예시 3:
입력: {example3_input}
출력: {example3_output}

위 예시들의 패턴을 파악하여, 다음 입력에 대한 적절한 출력을 생성해주세요:

입력: {new_input}
출력:
""",

    # 5.4 형식 및 구조 제어
    "format_control": """
다음 내용을 {format_type} 형식으로 변환해주세요:

내용:
{content}

다음 조건을 준수해주세요:
1. {format_type}의 표준 형식을 정확히 따를 것
2. 모든 정보를 포함할 것
3. 필요한 경우 적절한 구조화
4. 가독성 최적화

출력은 반드시 {format_type} 형식에 맞게 제공해주세요.
"""
}

# 프롬프트 패턴별 예시
PATTERN_EXAMPLES = {
    "role_prompting": [
        {
            "role": "경제학 교수",
            "role_description": "명문대 경제학과 교수로서 20년 이상의 거시경제학 연구 경력을 가진 전문가",
            "topic": "최근 인플레이션이 경제에 미치는 영향",
            "output": "# 인플레이션이 현 경제에 미치는 영향: 경제학적 분석\n\n## 거시경제학적 관점\n인플레이션은 단순한 물가 상승이 아닌 화폐 가치의 실질적 하락을 의미합니다. 현재의 인플레이션은 통화 공급 확대와 공급망 차질이 복합적으로 작용한 결과로..."
        },
        {
            "role": "UX 디자이너",
            "role_description": "실리콘밸리 테크 기업에서 10년 이상 사용자 경험을 설계해온 수석 UX 디자이너",
            "topic": "모바일 앱의 효과적인 온보딩 전략",
            "output": "# 효과적인 모바일 앱 온보딩 설계\n\n## UX 디자인 관점에서의 분석\n온보딩은 사용자의 첫인상을 결정하는 중요한 단계입니다. UX 디자이너로서 가장 중요하게 고려해야 할 점은 사용자의 '아하!' 순간을 빠르게 제공하는 것입니다..."
        }
    ],
    
    "chain_of_thought": [
        {
            "problem": "350명의 학생이 수학 시험을 봤습니다. 이 중 65%가 합격했고, 합격한 학생 중 40%가 A 학점을 받았습니다. A 학점을 받은 학생은 몇 명인가요?",
            "output": "# 단계적 문제 해결\n\n단계 1: 전체 학생 수 파악\n전체 학생 수는 350명입니다.\n\n단계 2: 합격한 학생 수 계산\n합격한 학생은 전체의 65%이므로, 350 × 0.65 = 227.5, 즉 228명입니다.\n\n단계 3: A 학점 받은 학생 수 계산\n합격한 학생 중 40%가 A 학점을 받았으므로, 228 × 0.4 = 91.2, 즉 91명입니다.\n\n단계 4: 최종 답변\n따라서 A 학점을 받은 학생은 91명입니다."
        }
    ],
    
    "few_shot_learning": [
        {
            "task_description": "주어진 문장에서 감정 분석하기",
            "example1_input": "이 영화는 정말 실망스러웠어요. 시간 낭비였습니다.",
            "example1_output": "감정: 부정적\n강도: 높음\n주요 감정: 실망, 후회",
            "example2_input": "서비스가 평범했어요. 특별히 좋지도 나쁘지도 않았습니다.",
            "example2_output": "감정: 중립적\n강도: 낮음\n주요 감정: 무관심",
            "example3_input": "이 제품은 제 기대를 완전히 뛰어넘었습니다! 매우 만족합니다.",
            "example3_output": "감정: 긍정적\n강도: 높음\n주요 감정: 만족, 기쁨",
            "new_input": "강의 내용은 유익했지만, 발표 방식이 지루했습니다.",
            "expected_output": "감정: 혼합됨\n강도: 중간\n주요 감정: 만족(내용), 지루함(방식)"
        }
    ]
}

# 템플릿 검색 함수
def get_template(category: str, template_name: str) -> str:
    """
    카테고리와 이름으로 템플릿 검색
    
    Args:
        category: 템플릿 카테고리
        template_name: 템플릿 이름
        
    Returns:
        템플릿 문자열
    """
    templates = {
        "academic": ACADEMIC_TEMPLATES,
        "programming": PROGRAMMING_TEMPLATES,
        "research": RESEARCH_TEMPLATES,
        "career": CAREER_TEMPLATES,
        "pattern": PROMPT_PATTERN_TEMPLATES
    }
    
    category_templates = templates.get(category.lower())
    if not category_templates:
        raise ValueError(f"템플릿 카테고리 '{category}'를 찾을 수 없습니다.")
    
    template = category_templates.get(template_name)
    if not template:
        raise ValueError(f"템플릿 '{template_name}'을 찾을 수 없습니다.")
    
    return template


def get_pattern_examples(pattern_name: str) -> list:
    """
    프롬프트 패턴 예시 검색
    
    Args:
        pattern_name: 패턴 이름
        
    Returns:
        패턴 예시 목록
    """
    examples = PATTERN_EXAMPLES.get(pattern_name)
    if not examples:
        raise ValueError(f"패턴 '{pattern_name}'의 예시를 찾을 수 없습니다.")
    
    return examples