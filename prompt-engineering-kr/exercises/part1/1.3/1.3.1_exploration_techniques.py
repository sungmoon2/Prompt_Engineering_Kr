"""
주제 탐색을 위한 초기 질문 방법 실습 모듈

Part 1 - 섹션 1.3.1 실습 코드: 새로운 주제를 효과적으로 탐색하기 위한 초기 질문 방법을 학습합니다.
"""

import os
import sys
from typing import Dict, List, Any, Optional

# 상위 디렉토리를 경로에 추가하여 utils 모듈을 import할 수 있게 설정
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.append(project_root)

from utils.prompt_builder import PromptBuilder
from utils.exercise_template import run_exercise

# 주제 옵션 정의
INITIAL_QUESTIONS_TOPICS = {
    "1": {"name": "학술 주제", "topic": "새로운 학술 주제 탐색을 위한 초기 질문 전략", "output_format": "질문 프레임워크"},
    "2": {"name": "기술 주제", "topic": "새로운 기술 분야 탐색을 위한 효과적인 질문법", "output_format": "질문 가이드"},
    "3": {"name": "사회 이슈", "topic": "복잡한 사회 이슈 이해를 위한 초기 질문 방법", "output_format": "질문 체계"},
    "4": {"name": "창작 주제", "topic": "창작 및 예술 주제 탐색을 위한 질문 기법", "output_format": "질문 맵"},
    "5": {"name": "비즈니스 분석", "topic": "비즈니스 문제 분석을 위한 초기 질문 접근법", "output_format": "질문 매트릭스"}
}

# 프롬프트 요약 정보
PROMPT_SUMMARY = {
    "basic": ["주제에 대한 직접적인 질문"],
    "enhanced": [
        "목적 명시: 초기 질문의 목표와 의도 명시",
        "구체적 요청: 체계적인 질문 프레임워크와 다양한 접근법 요청",
        "실용적 구성: 즉시 적용 가능한 예시와 템플릿 요청"
    ]
}

# 학습 포인트
LEARNING_POINTS = [
    "초기 질문은 주제의 전체적인 지형을 파악하는 데 중요한 역할을 합니다",
    "5W1H(누가, 무엇을, 언제, 어디서, 왜, 어떻게) 접근법은 포괄적인 초기 이해에 유용합니다",
    "개방형 질문으로 시작하여 점차 구체적인 질문으로 좁혀가는 접근이 효과적입니다",
    "분야별로 최적화된 질문 프레임워크를 활용하면 더 효율적으로 주제를 탐색할 수 있습니다"
]

def get_basic_prompt(topic: str) -> str:
    """기본 프롬프트 생성"""
    return f"{topic}에 대해 알려주세요."

def get_enhanced_prompt(topic: str, purpose: str, output_format: str) -> str:
    """향상된 프롬프트 생성"""
    builder = PromptBuilder()
    
    # 역할 및 맥락 설정
    builder.add_role(
        "질문 전략 전문가", 
        "새로운 주제 탐색을 위한 효과적인 질문 전략과 체계를 개발하는 전문가"
    )
    
    # 맥락 정보 추가
    builder.add_context(
        f"저는 대학생으로 {topic}에 관심이 있습니다. "
        f"새로운 주제를 처음 접할 때 효과적으로 탐색하기 위한 초기 질문 방법을 배우고 싶습니다. "
        f"AI와의 대화에서 최대한의 가치를 얻기 위해, 체계적이고 전략적인 질문 방법이 필요합니다."
    )
    
    # 구체적인 지시사항 추가
    if "학술 주제" in topic:
        builder.add_instructions([
            "학술적 주제를 탐색할 때 사용할 수 있는 포괄적인 초기 질문 프레임워크를 제시해주세요",
            "다양한 학문 분야(인문학, 사회과학, 자연과학, 공학 등)에 적용할 수 있는 범용적인 질문과 분야별 특화된 질문을 모두 포함해주세요",
            "주제의 기원, 발전, 현재 상태, 주요 이론, 논쟁점, 연구 방법론 등을 파악하기 위한 질문들을 체계적으로 구성해주세요",
            "초보자와 어느 정도 지식이 있는 학생 모두에게 유용한 질문 전략을 구분하여 제안해주세요",
            "학술 주제 탐색 과정에서 질문의 순서와 진행 방식에 대한 전략적 가이드도 제공해주세요"
        ])
    elif "기술 주제" in topic:
        builder.add_instructions([
            "새롭게 등장하거나 변화가 빠른 기술 분야를 탐색하기 위한 효과적인 질문 체계를 제시해주세요",
            "기술의 원리, 작동 방식, 발전 역사, 현재 트렌드, 미래 전망, 사회적 영향 등을 파악하기 위한 질문들을 포함해주세요",
            "기술 분야별(소프트웨어, 하드웨어, 인공지능, 바이오테크 등) 특화된 질문 접근법도 제안해주세요",
            "기술적 복잡성을 단계적으로 이해할 수 있도록 초보자부터 전문가 수준까지 질문의 깊이를 조절하는 방법을 설명해주세요",
            "다양한 관점(개발자, 사용자, 투자자, 정책 입안자 등)에서 기술을 이해하기 위한 질문 전략도 포함해주세요"
        ])
    elif "사회 이슈" in topic:
        builder.add_instructions([
            "복잡한 사회 이슈를 다각도로 이해하기 위한 초기 질문 체계를 제시해주세요",
            "이슈의 역사적 배경, 주요 이해관계자, 다양한 관점, 현재 논쟁점, 해결 방안 등을 파악하기 위한 질문들을 포함해주세요",
            "편향을 최소화하고 다양한 관점을 고려할 수 있는 균형 잡힌 질문 접근법을 설명해주세요",
            "정치, 경제, 사회, 문화, 환경 등 다양한 측면에서 이슈를 탐색하는 다차원적 질문 프레임워크를 제안해주세요",
            "데이터와 증거를 요청하는 질문과 가치 및 윤리적 측면을 탐구하는 질문을 균형 있게 포함해주세요"
        ])
    elif "창작 주제" in topic:
        builder.add_instructions([
            "창작 및 예술 분야 탐색을 위한 영감을 주는 질문 기법을 제시해주세요",
            "다양한 창작 영역(문학, 시각 예술, 음악, 공연, 디자인 등)을 탐색하기 위한 질문 접근법을 포함해주세요",
            "창작의 기술적 측면, 역사적 맥락, 미학적 특성, 상징성, 영향력 등을 탐구하는 질문들을 구성해주세요",
            "창작 프로세스, 영감의 원천, 표현 방식 등에 대한 통찰을 얻기 위한 질문 전략을 제안해주세요",
            "분석적 접근과 직관적 접근을 결합한 균형 잡힌 창작 주제 탐색 방법을 설명해주세요"
        ])
    elif "비즈니스 분석" in topic:
        builder.add_instructions([
            "비즈니스 문제와 기회를 체계적으로 분석하기 위한 초기 질문 매트릭스를 제시해주세요",
            "산업 분석, 시장 조사, 경쟁 환경, 내부 역량, 재무 상황, 고객 니즈 등을 파악하기 위한 질문들을 포함해주세요",
            "SWOT, PEST, 5 Forces 등 주요 비즈니스 분석 프레임워크를 활용한 질문 접근법을 설명해주세요",
            "정량적 분석과 정성적 분석을 위한 질문 유형을 구분하고 각각의 활용 방법을 제안해주세요",
            "비즈니스 의사결정을 위한 데이터 기반 질문과 전략적 통찰을 위한 질문의 균형을 맞추는 방법을 설명해주세요"
        ])
    else:
        builder.add_instructions([
            f"{topic}을 효과적으로 탐색하기 위한 체계적인 초기 질문 방법을 제시해주세요",
            "주제의 기본 개념, 중요성, 범위, 핵심 요소 등을 파악하기 위한 기초 질문들을 포함해주세요",
            "5W1H 프레임워크를 활용한 포괄적인 주제 탐색 질문들을 제안해주세요",
            "개방형 질문부터 시작하여 점차 구체적인 질문으로 좁혀가는 전략적 접근법을 설명해주세요",
            "질문의 순서와 진행 방식, 응답에 따른 후속 질문 전략도 함께 제안해주세요"
        ])
    
    # 출력 형식 지정
    builder.add_format_instructions(
        f"응답은 {output_format} 형식으로 구성해주세요. "
        f"마크다운 형식을 사용하여 제목, 소제목, 목록 등을 명확히 구분해주세요. "
        f"주요 질문 카테고리와 유형을 체계적으로 분류하고, 각 유형별 구체적인 질문 예시를 제공해주세요. "
        f"질문 프레임워크의 구조를 시각적으로 이해할 수 있도록 표나 다이어그램 형태로 표현해주세요. "
        f"초기 질문에서 후속 질문으로 이어지는 흐름과 진행 과정도 명확히 설명해주세요. "
        f"실제 대화 예시를 통해 질문 전략의 적용 방법을 보여주는 것도 도움이 될 것입니다. "
        f"모든 내용은 대학생이 바로 적용할 수 있도록 실용적이고 명확하게 작성해주세요."
    )
    
    return builder.build()

def main():
    """메인 함수"""
    # 실행 결과를 저장할 때 챕터별 폴더 구조를 사용
    run_exercise(
        title="주제 탐색을 위한 초기 질문 방법",
        topic_options=INITIAL_QUESTIONS_TOPICS,
        get_basic_prompt=get_basic_prompt,
        get_enhanced_prompt=get_enhanced_prompt,
        prompt_summary=PROMPT_SUMMARY,
        learning_points=LEARNING_POINTS
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n프로그램이 사용자에 의해 중단되었습니다.")
    except Exception as err:
        print(f"\n오류 발생: {err}")
        print("API 키나 네트워크 연결을 확인하세요.")