"""
단계별 개발 프로세스와 프롬프트 체인 실습 모듈

Part 5 - 섹션 5.4.2 실습 코드: 체계적인 프롬프트 체인을 구성하여 개발 과정을 관리하는 방법을 학습합니다.
"""

import os
import sys
from typing import Dict, List, Any, Optional

# 상위 디렉토리를 경로에 추가하여 utils 모듈을 import할 수 있게 설정
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.append(project_root)

from utils.prompt_builder import PromptBuilder
from utils.exercise_template import run_exercise

# 주제 옵션 정의
DEVELOPMENT_PROCESS_TOPICS = {
    "1": {"name": "웹 서비스 개발", "topic": "단계별 웹 서비스 개발 프로세스와 프롬프트 체인", "output_format": "개발 가이드"},
    "2": {"name": "모바일 앱 개발", "topic": "모바일 앱 개발을 위한 체계적 프롬프트 체인 설계", "output_format": "프로세스 문서"},
    "3": {"name": "데이터 분석 파이프라인", "topic": "데이터 분석 파이프라인 구축을 위한 단계별 접근법", "output_format": "워크플로우 가이드"},
    "4": {"name": "AI 기능 통합", "topic": "기존 애플리케이션에 AI 기능 통합을 위한 단계적 접근", "output_format": "통합 가이드"},
    "5": {"name": "프로젝트 리팩토링", "topic": "레거시 코드 리팩토링을 위한 체계적 프롬프트 체인", "output_format": "리팩토링 계획"}
}

# 프롬프트 요약 정보
PROMPT_SUMMARY = {
    "basic": ["개발 프로세스에 대한 일반적 안내 요청"],
    "enhanced": [
        "단계 분할: 개발 과정을 체계적 단계로 분해",
        "컨텍스트 연결: 단계 간 정보 전달 방식 명시",
        "단계별 프롬프트: 각 단계에 최적화된 프롬프트 패턴 요청", 
        "실용적 사례: 실제 프로젝트에 적용 가능한 예시 요청"
    ]
}

# 학습 포인트
LEARNING_POINTS = [
    "복잡한 개발 과정을 체계적 단계로 분해하면 관리 효율성과 품질이 향상됩니다",
    "각 개발 단계마다 최적화된 프롬프트 패턴을 적용하면 더 좋은 결과를 얻을 수 있습니다",
    "단계 간 컨텍스트를 효과적으로 연결하는 것이 프롬프트 체인의 핵심입니다",
    "피드백 루프와 검증 단계를 통합하면 개발 과정의 안정성을 높일 수 있습니다",
    "프롬프트 체인은 개인 개발자뿐만 아니라 팀 협업에도 효과적으로 적용할 수 있습니다"
]

def get_basic_prompt(topic: str) -> str:
    """기본 프롬프트 생성"""
    return f"{topic}에 대해 알려주세요."

def get_enhanced_prompt(topic: str, purpose: str, output_format: str) -> str:
    """향상된 프롬프트 생성"""
    builder = PromptBuilder()
    
    # 주제별 역할 및 맥락 설정
    if "웹 서비스 개발" in topic:
        builder.add_role(
            "풀스택 개발 프로세스 전문가", 
            "웹 서비스 개발의 전체 생명주기에 대한 깊은 이해를 가진 전문가로, 요구사항 분석부터 배포 및 유지보수까지 체계적인 개발 프로세스와 AI 활용 전략에 전문성을 갖추고 있습니다."
        )
        
        builder.add_context(
            f"저는 중규모 웹 서비스를 개발하려는 주니어 개발자입니다. "
            f"개발 과정을 체계적으로 진행하고 AI를 효과적으로 활용하고 싶습니다. "
            f"요구사항 분석부터 설계, 구현, 테스트, 배포까지 각 단계별로 최적화된 "
            f"프롬프트 체인을 구성하여 개발 과정을 관리하는 방법을 알고 싶습니다. "
            f"React와 Node.js 기반의 웹 서비스를 개발할 예정입니다."
        )
        
        builder.add_instructions([
            "단계별 웹 서비스 개발 프로세스와 이에 최적화된 프롬프트 체인을 설계해주세요",
            "요구사항 분석, 아키텍처 설계, 데이터 모델링, 프론트엔드/백엔드 구현, 테스트, 배포 등 주요 단계를 포함해주세요",
            "각 단계별로 활용할 수 있는 프롬프트 템플릿과 모범 사례를 제공해주세요",
            "단계 간 컨텍스트를 유지하고 결과물을 연결하는 효과적인 방법을 설명해주세요",
            "React와 Node.js 기반 웹 서비스 개발에 초점을 맞춘 실용적인 예시와 적용 방법을 포함해주세요"
        ])
        
    elif "모바일 앱 개발" in topic:
        builder.add_role(
            "모바일 앱 개발 프로세스 전문가", 
            "모바일 애플리케이션 개발의 전체 생명주기와 체계적인 개발 방법론에 대한 깊은 이해를 가진 전문가로, AI를 활용한 효율적인 모바일 앱 개발 프로세스에 전문성을 갖추고 있습니다."
        )
        
        builder.add_context(
            f"저는 크로스 플랫폼 모바일 앱을 개발하려는 프리랜서 개발자입니다. "
            f"혼자 앱을 개발하면서 AI를 최대한 활용하여 효율적으로 진행하고 싶습니다. "
            f"기획부터 설계, 개발, 테스트, 출시까지 필요한 모든 단계를 체계적으로 "
            f"관리하고 각 단계에 최적화된 프롬프트 체인을 구성하는 방법을 알고 싶습니다. "
            f"Flutter를 사용하여 iOS와 Android 앱을 동시에 개발할 예정입니다."
        )
        
        builder.add_instructions([
            "모바일 앱 개발을 위한 체계적인 프롬프트 체인을 설계해주세요",
            "기획, 설계, UI/UX 디자인, 개발, 테스트, 배포 등 모바일 앱 개발의 핵심 단계를 포함해주세요",
            "각 단계에 최적화된 프롬프트 패턴과 템플릿, 그리고 AI 활용 전략을 제안해주세요",
            "Flutter를 활용한 크로스 플랫폼 개발에 초점을 맞추고, 단계 간 결과물을 효과적으로 연결하는 방법을 설명해주세요",
            "혼자 개발하는 프리랜서에게 유용한 실용적인 팁과 예시를 포함해주세요"
        ])
        
    elif "데이터 분석 파이프라인" in topic:
        builder.add_role(
            "데이터 분석 워크플로우 전문가", 
            "데이터 수집부터 분석, 시각화까지 체계적인 데이터 분석 파이프라인 구축에 대한 깊은 이해를 가진 전문가로, AI를 활용한 효율적인 데이터 분석 프로세스에 전문성을 갖추고 있습니다."
        )
        
        builder.add_context(
            f"저는 마케팅 데이터 분석 파이프라인을 구축하려는 데이터 애널리스트입니다. "
            f"다양한 소스(웹사이트, 소셜 미디어, 이메일 캠페인 등)에서 데이터를 수집하고, "
            f"처리하여 인사이트를 도출하는 전체 과정을 체계화하고 싶습니다. "
            f"각 단계별로 AI를 활용하여 효율적으로 작업을 진행하고, 재현 가능한 "
            f"분석 파이프라인을 구축하는 방법을 알고 싶습니다. Python 기반으로 작업할 예정입니다."
        )
        
        builder.add_instructions([
            "데이터 분석 파이프라인 구축을 위한 단계별 접근법과 프롬프트 체인을 설계해주세요",
            "데이터 수집, 전처리, 탐색적 분석, 모델링, 시각화, 보고서 작성 등 데이터 분석의 핵심 단계를 포함해주세요",
            "각 단계에 최적화된 프롬프트 패턴과 AI 활용 전략을 제안해주세요",
            "Python 생태계(pandas, matplotlib, scikit-learn 등)를 활용한 구체적인 예시와 코드 스니펫을 포함해주세요",
            "마케팅 데이터 분석에 특화된 접근법과 함께, 재현 가능하고 자동화된 파이프라인 구축 방법을 설명해주세요"
        ])
        
    elif "AI 기능 통합" in topic:
        builder.add_role(
            "AI 통합 전문가", 
            "기존 애플리케이션에 AI 기능을 효과적으로 통합하는 방법론과 프로세스에 대한 깊은 이해를 가진 전문가로, 다양한 AI 서비스 및 모델 활용 전략에 전문성을 갖추고 있습니다."
        )
        
        builder.add_context(
            f"저는 기존 웹 애플리케이션에 AI 기능을 통합하려는 개발 팀장입니다. "
            f"텍스트 분석, 이미지 인식, 추천 시스템 등 다양한 AI 기능을 애플리케이션에 "
            f"추가하고자 합니다. 어떤 AI 서비스/모델을 선택하고, 어떻게 설계 및 구현하며, "
            f"효과적으로 통합하고 테스트할지에 대한 체계적인 접근법이 필요합니다. "
            f"각 단계별로 최적화된 프롬프트 체인을 구성하여 AI 기능 통합 과정을 관리하고 싶습니다."
        )
        
        builder.add_instructions([
            "기존 애플리케이션에 AI 기능 통합을 위한 단계적 접근법과 프롬프트 체인을 설계해주세요",
            "AI 기능 요구사항 분석, 서비스/모델 선택, 설계, 구현, 통합, 테스트, 배포 등 주요 단계를 포함해주세요",
            "각 단계에 최적화된 프롬프트 패턴과 AI 활용 전략을 제안해주세요",
            "텍스트 분석, 이미지 인식, 추천 시스템 등 다양한 AI 기능 유형별 통합 접근법을 설명해주세요",
            "유사한 AI 기능 통합 프로젝트의 실제 사례와 함께, 단계별 결과물을 효과적으로 연결하는 방법을 포함해주세요"
        ])
        
    elif "프로젝트 리팩토링" in topic:
        builder.add_role(
            "코드 리팩토링 전문가", 
            "레거시 코드 분석과 효과적인 리팩토링 전략에 대한 깊은 이해를 가진 전문가로, 코드 품질 개선과 기술 부채 관리를 위한 체계적인 접근법에 전문성을 갖추고 있습니다."
        )
        
        builder.add_context(
            f"저는 오래된 레거시 웹 애플리케이션을 리팩토링하려는 개발 팀장입니다. "
            f"코드베이스가 크고 복잡하며, 기술 부채가 많이 쌓여 있습니다. "
            f"아키텍처 개선, 코드 현대화, 테스트 자동화 등을 포함한 전체적인 리팩토링이 필요합니다. "
            f"리팩토링 과정을 체계적으로 접근하고, 각 단계별로 AI를 활용하여 "
            f"효율적으로 진행하는 방법을 알고 싶습니다."
        )
        
        builder.add_instructions([
            "레거시 코드 리팩토링을 위한 체계적인 프롬프트 체인을 설계해주세요",
            "코드 분석, 아키텍처 평가, 리팩토링 전략 수립, 단계적 구현, 테스트, 검증 등 주요 단계를 포함해주세요",
            "각 단계에 최적화된 프롬프트 패턴과 템플릿, 그리고 AI 활용 전략을 제안해주세요",
            "리팩토링 과정에서 발생할 수 있는 위험 관리와 지속적인 통합을 위한 전략을 설명해주세요",
            "실제 레거시 코드 리팩토링 사례와 함께, 단계별 접근법을 구체적으로 설명하는 리팩토링 계획을 제공해주세요"
        ])
        
    else:
        builder.add_role(
            "개발 프로세스 전문가", 
            "소프트웨어 개발의 전체 생명주기와 단계별 프로세스에 대한 깊은 이해를 가진 전문가로, AI를 활용한 효율적인 개발 방법론과 프롬프트 체인 구성에 전문성을 갖추고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 개발자입니다. "
            f"개발 과정을 체계적으로 관리하고 AI를 효과적으로 활용하여 "
            f"생산성을 높이고 싶습니다. 각 개발 단계에 최적화된 프롬프트 체인을 "
            f"구성하고, 단계 간 연결성을 유지하는 방법을 알고 싶습니다."
        )
        
        builder.add_instructions([
            f"{topic}을 위한 체계적인 개발 프로세스와 프롬프트 체인을 설계해주세요",
            "주요 개발 단계를 식별하고 각 단계별 목표와 활동을 설명해주세요",
            "각 단계에 최적화된 프롬프트 패턴과 템플릿을 제안해주세요",
            "단계 간 컨텍스트를 유지하고 결과물을 연결하는 효과적인 방법을 설명해주세요",
            "실제 프로젝트에 적용할 수 있는 구체적인 예시와 모범 사례를 포함해주세요"
        ])
    
    # 출력 형식 지정
    builder.add_format_instructions(
        f"응답은 {output_format} 형식으로 구성해주세요. "
        f"마크다운 형식을 사용하여 제목, 소제목, 목록 등을 명확히 구분해주세요. "
        f"개발 프로세스의 각 단계를 명확히 구분하고, 단계별로 최적화된 프롬프트 예시를 포함해주세요. "
        f"프롬프트 체인의 구성 방법과 단계 간 컨텍스트 유지 전략을 구체적으로 설명해주세요. "
        f"실제 개발 과정에서 바로 적용할 수 있도록 실용적인 예시와 팁을 제공해주세요. "
        f"가능한 경우 프롬프트 체인의 흐름을 시각화하거나 다이어그램으로 표현해주세요."
    )
    
    return builder.build()

def main():
    """메인 함수"""
    # 실행 결과를 저장할 때 챕터별 폴더 구조를 사용
    run_exercise(
        title="단계별 개발 프로세스와 프롬프트 체인",
        topic_options=DEVELOPMENT_PROCESS_TOPICS,
        get_basic_prompt=get_basic_prompt,
        get_enhanced_prompt=get_enhanced_prompt,
        prompt_summary=PROMPT_SUMMARY,
        learning_points=LEARNING_POINTS
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n프로그램이 사용자에 의해 중단되었습니다.")
    except Exception as err:
        print(f"\n오류 발생: {err}")
        print("API 키나 네트워크 연결을 확인하세요.")