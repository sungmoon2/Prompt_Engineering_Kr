"""
체계적 오류 수정 접근법 실습 모듈

Part 8 - 섹션 8.1.3 실습 코드: 식별된 프롬프트 오류를 체계적으로 수정하는 방법을 학습합니다.
"""

import os
import sys
from typing import Dict, List, Any, Optional

# 상위 디렉토리를 경로에 추가하여 utils 모듈을 import할 수 있게 설정
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.append(project_root)

from utils.prompt_builder import PromptBuilder
from utils.exercise_template import run_exercise

# 주제 옵션 정의
ERROR_CORRECTION_TOPICS = {
    "1": {"name": "명확성 오류 수정", "topic": "프롬프트 명확성 관련 오류 수정 전략", "output_format": "수정 가이드"},
    "2": {"name": "맥락 오류 수정", "topic": "프롬프트 맥락 관련 오류 수정 방법", "output_format": "단계별 접근법"},
    "3": {"name": "구조 오류 수정", "topic": "프롬프트 구조 관련 오류 수정 기법", "output_format": "개선 프레임워크"},
    "4": {"name": "전문성 오류 수정", "topic": "프롬프트 전문성 관련 오류 수정 전략", "output_format": "수정 워크시트"},
    "5": {"name": "점진적 개선 접근법", "topic": "프롬프트 점진적 개선 프로세스", "output_format": "단계별 개선 가이드"}
}

# 프롬프트 요약 정보
PROMPT_SUMMARY = {
    "basic": ["프롬프트 오류 수정에 대한 일반적 질문"],
    "enhanced": [
        "체계적 접근: 오류 수정을 위한 구조화된 프로세스 요청",
        "실제 사례: 예시 프롬프트를 통한 구체적 수정 과정 제시",
        "단계별 전략: 오류 유형별 맞춤형 수정 전략 및 도구 요청"
    ]
}

# 학습 포인트
LEARNING_POINTS = [
    "프롬프트 오류 수정에는 체계적인 프로세스와 우선순위 설정이 필요합니다",
    "각 오류 유형에 특화된 수정 전략을 적용하면 더 효과적으로 문제를 해결할 수 있습니다",
    "한 번에 하나의 요소만 변경하는 점진적 접근법이 변경의 효과를 정확히 평가하는데 도움이 됩니다",
    "수정 과정과 결과를 문서화하면 패턴을 발견하고 향후 프롬프트 작성 능력을 향상시킬 수 있습니다"
]

def get_basic_prompt(topic: str) -> str:
    """기본 프롬프트 생성"""
    return f"{topic}에 대해 알려주세요. 어떻게 프롬프트 오류를 수정할 수 있나요?"

def get_enhanced_prompt(topic: str, purpose: str, output_format: str) -> str:
    """향상된 프롬프트 생성"""
    builder = PromptBuilder()
    
    # 역할 및 맥락 설정
    builder.add_role(
        "프롬프트 엔지니어링 전문가", 
        "프롬프트 문제를 식별하고 체계적으로 수정하는 방법을 가르치는 전문가"
    )
    
    # 맥락 정보 추가
    builder.add_context(
        f"저는 프롬프트 엔지니어링을 배우는 학생으로, {topic}에 관심이 있습니다. "
        f"프롬프트에서 오류를 발견한 후 이를 효과적으로 수정하는 체계적인 방법을 배우고 싶습니다. "
        f"특히 실제 사례를 통한 단계별 접근법과 구체적인 수정 전략을 알고 싶습니다."
    )
    
    # 구체적인 지시사항 추가
    if "명확성 관련 오류" in topic:
        # 명확성 관련 오류 수정에 대한 지시사항
        
        # 예시 오류 프롬프트
        unclear_prompt = """
창의적인 아이디어 좀 줘. 흥미롭고 새로운 걸로 부탁해.
"""
        
        builder.add_instructions([
            "프롬프트 명확성 관련 오류(모호한 지시, 지나친 추상성, 복합적 요청, 일관성 없는 요구 등)를 체계적으로 수정하는 접근법을 설명해주세요",
            f"다음 예시 프롬프트의 명확성 관련 오류를 식별하고 단계별로 수정하는 과정을 보여주세요: \"{unclear_prompt}\"",
            "명확성 문제 수정을 위한 구체적인 전략과 기법을 유형별로 설명해주세요",
            "명확성 향상을 위한 체계적인 체크리스트나 워크시트를 제공해주세요",
            "명확성 관련 오류 수정 시 흔히 범하는 실수와 주의사항도 포함해주세요",
            "수정 전/후 비교 예시를 통해 명확성 개선이 결과에 미치는 영향을 보여주세요"
        ])
        
    elif "맥락 관련 오류" in topic:
        # 맥락 관련 오류 수정에 대한 지시사항
        
        # 예시 오류 프롬프트
        context_error_prompt = """
우리 웹사이트에 대한 피드백 설문조사를 만들어줘.
"""
        
        builder.add_instructions([
            "프롬프트 맥락 관련 오류(맥락 부족, 맥락 과잉, 잘못된 가정, 부적절한 예시 등)를 체계적으로 수정하는 접근법을 설명해주세요",
            f"다음 예시 프롬프트의 맥락 관련 오류를 식별하고 단계별로 수정하는 과정을 보여주세요: \"{context_error_prompt}\"",
            "맥락 문제 수정을 위한 구체적인 전략과 기법을 유형별로 설명해주세요",
            "맥락 정보의 적절한 양과 질을 판단하는 프레임워크를 제공해주세요",
            "맥락 관련 오류 수정 시 주의해야 할 균형점(너무 많거나 적은 정보)에 대해 설명해주세요",
            "수정 전/후 비교 예시를 통해 적절한 맥락 제공이 결과에 미치는 영향을 보여주세요"
        ])
        
    elif "구조 관련 오류" in topic:
        # 구조 관련 오류 수정에 대한 지시사항
        
        # 예시 오류 프롬프트
        structure_error_prompt = """
디지털 마케팅 전략에 대한 보고서 작성해줘. SEO, 소셜 미디어 마케팅, 이메일 마케팅, 
콘텐츠 마케팅, PPC, 인플루언서 마케팅, 모바일 마케팅, 웹사이트 최적화, 분석과 
측정, 예산 배분, 트렌드 분석 포함해줘.
"""
        
        builder.add_instructions([
            "프롬프트 구조 관련 오류(논리적 흐름 부재, 우선순위 불명확, 형식 지정 누락, 구분자 부족 등)를 체계적으로 수정하는 접근법을 설명해주세요",
            f"다음 예시 프롬프트의 구조 관련 오류를 식별하고 단계별로 수정하는 과정을 보여주세요: \"{structure_error_prompt}\"",
            "구조 문제 수정을 위한 구체적인 전략과 기법을 유형별로 설명해주세요",
            "효과적인 프롬프트 구조화를 위한 템플릿이나 프레임워크를 제공해주세요",
            "복잡한 요청을 체계적으로 구조화하는 방법과 주의사항을 설명해주세요",
            "수정 전/후 비교 예시를 통해 구조 개선이 결과의 조직성과 유용성에 미치는 영향을 보여주세요"
        ])
        
    elif "전문성 관련 오류" in topic:
        # 전문성 관련 오류 수정에 대한 지시사항
        
        # 예시 오류 프롬프트
        expertise_error_prompt = """
기계학습에 대한 기술 문서를 작성해줘.
"""
        
        builder.add_instructions([
            "프롬프트 전문성 관련 오류(부적절한 난이도, 잘못된 용어 사용, 역할 모호성, 분야 불일치 등)를 체계적으로 수정하는 접근법을 설명해주세요",
            f"다음 예시 프롬프트의 전문성 관련 오류를 식별하고 단계별로 수정하는 과정을 보여주세요: \"{expertise_error_prompt}\"",
            "전문성 문제 수정을 위한 구체적인 전략과 기법을 유형별로 설명해주세요",
            "대상 독자와 전문성 수준을 명확히 지정하는 효과적인 방법을 제공해주세요",
            "역할 부여와 관점 지정을 통한 전문성 조정 전략을 설명해주세요",
            "수정 전/후 비교 예시를 통해 적절한 전문성 수준 설정이 결과의 질과 유용성에 미치는 영향을 보여주세요"
        ])
        
    else:  # 점진적 개선 접근법
        # 점진적 개선에 대한 지시사항
        
        # 점진적 개선 예시 프롬프트
        incremental_prompt = """
비즈니스 계획 작성해줘.
"""
        
        builder.add_instructions([
            "프롬프트를 점진적으로 개선하는 체계적인 접근법과 프로세스를 단계별로 설명해주세요",
            f"다음 예시 프롬프트를 점진적 개선 방법론을 통해 단계별로 개선하는 과정을 보여주세요: \"{incremental_prompt}\"",
            "한 번에 하나의 요소만 변경하는 점진적 접근법의 이점과 구체적인 적용 방법을 설명해주세요",
            "점진적 개선 과정을 체계적으로 문서화하고 추적하는 템플릿이나 워크시트를 제공해주세요",
            "점진적 개선 시 변경의 효과를 평가하는 방법과 판단 기준을 설명해주세요",
            "점진적 개선 접근법을 다양한 유형의 프롬프트 문제에 적용하는 예시를 제공해주세요"
        ])
    
    # 출력 형식 지정
    builder.add_format_instructions(
        f"응답은 {output_format} 형식으로 구성해주세요. "
        f"마크다운 형식을 사용하여 제목, 소제목, 표, 목록 등을 명확히 구분해주세요. "
        f"다음 섹션들을 포함해주세요: "
        f"1) 수정 프로세스: 체계적인 오류 수정 단계 "
        f"2) 구체적 전략: 해당 오류 유형별 효과적인 수정 방법 "
        f"3) 실제 적용: 예시 프롬프트의 단계별 개선 과정 "
        f"4) 실용적 도구: 템플릿, 체크리스트, 워크시트 등 "
        f"5) 주의사항: 수정 과정에서 피해야 할 실수와 균형점 "
        f"수정 전/후 비교 예시를 통해 개념을 명확히 설명해주세요."
    )
    
    return builder.build()

def main():
    """메인 함수"""
    # 실행 결과를 저장할 때 챕터별 폴더 구조를 사용
    run_exercise(
        title="체계적 오류 수정 접근법",
        topic_options=ERROR_CORRECTION_TOPICS,
        get_basic_prompt=get_basic_prompt,
        get_enhanced_prompt=get_enhanced_prompt,
        prompt_summary=PROMPT_SUMMARY,
        learning_points=LEARNING_POINTS
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n프로그램이 사용자에 의해 중단되었습니다.")
    except Exception as err:
        print(f"\n오류 발생: {err}")
        print("API 키나 네트워크 연결을 확인하세요.")