"""
논리적 추론 과정 유도하기 실습 모듈

Part 7 - 섹션 7.2.2 실습 코드: 형식적 논리 구조, 가정-검증 구조, MECE 원칙 등을
활용한 체계적인 논리적 추론 과정 유도 방법을 실습합니다.
"""

import os
import sys
from typing import Dict, List, Any, Optional

# 상위 디렉토리를 경로에 추가하여 utils 모듈을 import할 수 있게 설정
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.append(project_root)

from utils.prompt_builder import PromptBuilder
from utils.exercise_template import run_exercise

# 주제 옵션 정의
LOGICAL_REASONING_TOPICS = {
    "1": {"name": "형식적 논리 구조", "topic": "연역적/귀납적/가설적 추론 구조 활용", "output_format": "논증 분석"},
    "2": {"name": "가정-검증 구조", "topic": "가설 설정과 체계적 검증 접근법", "output_format": "가설 분석"},
    "3": {"name": "MECE 원칙 활용", "topic": "상호배타적이고 총체적인 논리 분석", "output_format": "MECE 분석"},
    "4": {"name": "이슈 트리 분석", "topic": "문제의 논리적 분기와 구조화", "output_format": "이슈 트리"},
    "5": {"name": "논리적 오류 관리", "topic": "오류 식별 및 교정 전략", "output_format": "오류 분석"}
}

# 프롬프트 요약 정보
PROMPT_SUMMARY = {
    "basic": ["일반적인 논리 분석 요청"],
    "enhanced": [
        "논리 구조화 요청: 특정 논리 구조나 프레임워크 적용 요청",
        "단계적 접근: 체계적인 논리 단계와 추론 과정 요청",
        "메타인지적 요소: 사용된 논리 원칙과 접근법 설명 요청",
        "포괄적 분석: MECE 원칙에 따른 완전한 분석 요청"
    ]
}

# 학습 포인트
LEARNING_POINTS = [
    "논리적 추론 과정을 체계적으로 유도하면 복잡한 문제에 대한 더 정확하고 견고한 결론에 도달할 수 있습니다",
    "형식적 논리 구조(연역적, 귀납적, 가설적 추론)를 명시적으로 적용하면 추론의 타당성과 한계를 더 잘 이해할 수 있습니다",
    "가정-검증 구조를 활용하면 가설을 체계적으로 검토하고 잠재적 오류를 방지할 수 있습니다",
    "MECE 원칙을 적용하면 문제나 주제를 중복 없이 완전하게 분석할 수 있습니다",
    "논리적 오류를 식별하고 관리하는 전략을 통합하면 더 균형 잡히고 강력한 논증을 구축할 수 있습니다"
]

def get_basic_prompt(topic: str) -> str:
    """기본 프롬프트 생성"""
    if "형식적 논리" in topic:
        return """
다음 주장을 논리적으로 분석해주세요:

'모든 포유류는 폐로 호흡한다. 고래는 바다에 산다. 많은 사람들이 고래를 물고기로 오해한다. 
그러나 고래는 포유류이므로 폐로 호흡한다.'
"""
    elif "가정-검증" in topic:
        return """
다음 가설을 분석해주세요:

'청소년들의 과도한 소셜 미디어 사용은 정신 건강에 부정적인 영향을 미친다.'
"""
    elif "MECE" in topic:
        return """
다음 비즈니스 문제를 분석해주세요:

'스타트업의 고객 확보율이 지난 두 분기 동안 30% 감소했다.'
"""
    elif "이슈 트리" in topic:
        return """
다음 의사결정 문제를 분석해주세요:

'회사가 새로운 해외 시장에 진출해야 하는가?'
"""
    elif "논리적 오류" in topic:
        return """
다음 주장에서 논리적 오류를 분석해주세요:

'지난 10년간 스마트폰 사용량이 증가했고, 같은 기간 청소년 우울증도 증가했다. 
따라서 스마트폰 사용이 청소년 우울증을 유발한다.'
"""
    else:
        return f"{topic}에 대해 논리적으로 분석해주세요."

def get_enhanced_prompt(topic: str, purpose: str, output_format: str) -> str:
    """향상된 프롬프트 생성"""
    builder = PromptBuilder()
    
    # 역할 및 맥락 설정
    if "형식적 논리" in topic:
        builder.add_role(
            "논리학 전문가", 
            "형식 논리학과 논증 분석을 전문으로 하는 학자로, 다양한 추론 구조(연역적, 귀납적, 가설적 추론)와 그 적용에 깊은 전문성을 갖고 있습니다. 복잡한 논증을 명확한 논리적 구조로 분석하고 그 타당성과 한계를 체계적으로 평가하는 능력을 보유하고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 다양한 형식적 논리 구조를 이해하고 "
            f"실제 주장과 논증을 분석하는 데 적용하는 방법을 배우고 싶습니다. 특히 연역적, "
            f"귀납적, 가설적 추론의 차이점과 각 추론 방식이 어떻게 적용되는지, 그리고 "
            f"그 강점과 한계를 이해하고 싶습니다."
        )
        
        builder.add_instructions([
            "다음 주장을 형식적 논리 구조 관점에서 체계적으로 분석해주세요: '모든 포유류는 폐로 호흡한다. 고래는 바다에 산다. 많은 사람들이 고래를 물고기로 오해한다. 그러나 고래는 포유류이므로 폐로 호흡한다.'",
            "다음과 같은 체계적인 논리 분석 접근법으로 분석해주세요:",
            "1. 논증 구조 파악: 주장에서의 전제와 결론 식별",
            "2. 논리 유형 분석: 사용된 추론 유형(연역적, 귀납적, 가설적) 식별",
            "3. 형식적 표현: 논증을 형식 논리학적 구조로 변환",
            "4. 타당성 평가: 논리적 구조의 타당성 검토",
            "5. 건전성 평가: 전제의 참/거짓 여부 검토",
            "6. 한계 및 대안: 논증의 한계와 가능한 대안적 해석",
            "각 분석 단계에서 형식 논리학의 원칙과 규칙을 어떻게 적용하는지 명확히 설명하고, 다양한 논리적 구조(연역적, 귀납적, 가설적)의 특성과 적용 방식의 차이점도 함께 설명해주세요."
        ])
        
    elif "가정-검증" in topic:
        builder.add_role(
            "가설 검증 전문가", 
            "과학적 방법론과 가설 검증을 전문으로 하는 연구자로, 체계적인 가설 설정과 증거 기반 검증에 깊은 전문성을 갖고 있습니다. 복잡한 현상에 대한 가설을 명확히 형성하고, 이를 검증하기 위한 체계적인 접근법을 개발하며, 증거를 객관적으로 평가하는 능력을 보유하고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 가설을 체계적으로 설정하고 검증하는 "
            f"방법을 배우고 싶습니다. 특히 사회 현상이나 복잡한 문제에 대한 가설을 어떻게 "
            f"명확하게 정의하고, 어떤 증거를 통해 검증할 수 있는지, 그리고 가설과 증거 "
            f"사이의 관계를 어떻게 체계적으로 분석할 수 있는지 이해하고 싶습니다."
        )
        
        builder.add_instructions([
            "다음 가설을 가정-검증 구조를 활용하여 체계적으로 분석해주세요: '청소년들의 과도한 소셜 미디어 사용은 정신 건강에 부정적인 영향을 미친다.'",
            "다음과 같은 가설 설정-검증 구조로 접근해주세요:",
            "1. 가설 명확화: 핵심 개념(과도한 사용, 정신 건강, 부정적 영향 등)의 정의와 가설의 정확한 범위 설정",
            "2. 가설 구체화: 가능한 메커니즘과 인과 관계 경로 식별",
            "3. 대립 가설: 대안적 설명이나 반대 가설 식별",
            "4. 증거 유형 분류: 가설을 지지하거나 반박할 수 있는 다양한 유형의 증거 분류",
            "5. 증거 평가: 현존하는 증거의 강도, 일관성, 인과성 평가",
            "6. 가설 수정: 증거에 기반한 가설의 수정이나 정교화",
            "7. 결론 및 한계: 현재 증거 상태에서의 잠정적 결론과 불확실성",
            "각 단계에서 논리적 추론 과정을 명확히 보여주고, 가설과 증거 사이의 관계를 객관적이고 체계적으로 분석해주세요. 실제 연구 결과나 예시를 활용하여 분석의 구체성을 높여주세요."
        ])
        
    elif "MECE" in topic:
        builder.add_role(
            "MECE 분석 전문가", 
            "상호배타적이고 총체적으로 망라하는(MECE) 논리 분석을 전문으로 하는 컨설턴트로, 복잡한 문제를 체계적으로 분해하고 구조화하는 데 깊은 전문성을 갖고 있습니다. 특히 비즈니스 문제와 전략적 의사결정에서 MECE 원칙을 적용하여 명확하고 포괄적인 분석 프레임워크를 개발하는 능력을 보유하고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 비즈니스 학생입니다. MECE(상호배타적이고 총체적으로 "
            f"망라하는) 원칙을 활용하여 복잡한 문제를 체계적으로 분석하는 방법을 배우고 싶습니다. "
            f"특히 문제를 명확한 범주로 분류하고, 모든 가능성을 누락 없이 고려하며, 논리적으로 "
            f"완전한 분석을 수행하는 구체적인 접근법을 이해하고 싶습니다."
        )
        
        builder.add_instructions([
            "다음 비즈니스 문제를 MECE 원칙을 활용하여 체계적으로 분석해주세요: '스타트업의 고객 확보율이 지난 두 분기 동안 30% 감소했다.'",
            "다음과 같은 MECE 기반 분석 구조로 접근해주세요:",
            "1. MECE 범주화: 고객 확보율 감소 원인을 상호배타적이고 총체적으로 망라하는 범주로 분류",
            "   - 내부 요인 vs. 외부 요인",
            "   - 또는 제품 관련, 마케팅 관련, 경쟁 관련, 시장 관련 등 다른 MECE 구조",
            "2. 각 범주의 하위 요소 MECE 분해: 각 주요 범주를 다시 MECE 원칙에 따라 하위 요소로 분해",
            "3. 체계적 분석: 각 요소별 가능성, 영향, 증거 평가",
            "4. 우선순위화: 분석 결과에 기반한 가능성 높은 원인 우선순위 설정",
            "5. 해결 방안 MECE 구조화: 식별된 원인에 대응하는 해결 방안을 MECE 원칙에 따라 구조화",
            "각 단계에서 MECE 원칙이 어떻게 적용되는지 명확히 설명하고, 문제의 모든 측면을 중복 없이 완전하게 고려하는 분석 과정을 보여주세요. 표나 다이어그램을 활용하여 MECE 구조를 시각화해주세요."
        ])
        
    elif "이슈 트리" in topic:
        builder.add_role(
            "전략적 사고 전문가", 
            "이슈 트리 분석을 활용한 전략적 의사결정을 전문으로 하는 컨설턴트로, 복잡한 의사결정 문제를 논리적으로 분해하고 구조화하는 데 깊은 전문성을 갖고 있습니다. 체계적인 질문 체인을 통해 핵심 이슈를 식별하고 분석하여 명확한 전략적 방향을 도출하는 능력을 보유하고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 비즈니스 학생입니다. 이슈 트리 분석을 활용하여 "
            f"복잡한 의사결정 문제를 체계적으로 구조화하고 분석하는 방법을 배우고 싶습니다. "
            f"특히 핵심 질문을 논리적으로 분기하여 모든 관련 요소를 체계적으로 고려하고, "
            f"각 하위 질문에 대한 분석을 통합하여 최종 결론에 도달하는 접근법을 이해하고 싶습니다."
        )
        
        builder.add_instructions([
            "다음 의사결정 문제를 이슈 트리 분석을 활용하여 체계적으로 접근해주세요: '회사가 새로운 해외 시장에 진출해야 하는가?'",
            "다음과 같은 이슈 트리 구조로 분석해주세요:",
            "1. 최상위 질문 설정: '회사가 새로운 해외 시장에 진출해야 하는가?'",
            "2. 1단계 하위 질문 (MECE):",
            "   - 시장 기회: '해당 시장에 충분한 기회가 있는가?'",
            "   - 회사 역량: '회사가 이 시장에서 성공할 수 있는 역량을 갖추고 있는가?'",
            "   - 전략적 적합성: '이 진출이 회사의 전체 전략과 일치하는가?'",
            "   - 리스크 관리: '관련 리스크를 효과적으로 관리할 수 있는가?'",
            "3. 2단계 하위 질문: 각 1단계 질문을 더 구체적인 하위 질문으로 분해",
            "4. 각 최하위 질문에 대한 증거 기반 분석",
            "5. 상향식 통합: 하위 질문에서 상위 질문으로 답변 통합",
            "6. 최종 의사결정 및 실행 계획",
            "각 단계에서 논리적 추론 과정을 명확히 보여주고, 이슈 트리의 구조와 각 분기점의 논리적 관계를 시각화해주세요. 증거와 분석이 어떻게 최종 결론으로 통합되는지 체계적으로 설명해주세요."
        ])
        
    elif "논리적 오류" in topic:
        builder.add_role(
            "비판적 사고 전문가", 
            "논리적 오류 식별과 비판적 사고를 전문으로 하는 학자로, 다양한 논증에서 형식적/비형식적 오류를 분석하고 평가하는 데 깊은 전문성을 갖고 있습니다. 논리적 오류의 유형과 특성을 체계적으로 분류하고, 이를 교정하여 더 견고한 논증을 구성하는 방법론을 개발하는 능력을 보유하고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 다양한 주장과 논증에서 논리적 오류를 "
            f"식별하고 분석하는 방법을 배우고 싶습니다. 특히 흔한 논리적 오류의 유형과 "
            f"특성을 이해하고, 이를 체계적으로 식별하는 접근법, 그리고 오류를 교정하여 "
            f"더 견고한 논증을 구성하는 방법을 배우고 싶습니다."
        )
        
        builder.add_instructions([
            "다음 주장에서 발생 가능한 논리적 오류를 체계적으로 식별하고 분석해주세요: '지난 10년간 스마트폰 사용량이 증가했고, 같은 기간 청소년 우울증도 증가했다. 따라서 스마트폰 사용이 청소년 우울증을 유발한다.'",
            "다음과 같은 논리 오류 분석 구조로 접근해주세요:",
            "1. 주장 분석: 전제와 결론 명확히 식별",
            "2. 논리 구조 파악: 사용된 추론 유형과 구조 분석",
            "3. 논리적 오류 식별: 잠재적 형식적/비형식적 오류 식별",
            "4. 오류 유형 분류 및 설명: 각 오류의 특성과 영향 설명",
            "5. 오류 발생 원인: 이러한 오류가 발생하는 인지적/논리적 원인 분석",
            "6. 오류 교정: 오류를 수정한 더 견고한 논증 재구성",
            "7. 일반적 교훈: 유사한 오류를 피하기 위한 전략",
            "각 단계에서 논리학과 비판적 사고의 원칙을 명확히 적용하고, 형식적/비형식적 오류의 특성과 영향을 체계적으로 분석해주세요. 유사한 오류가 발생하는 다른 맥락의 예시도 제공하여 이해를 돕고, 더 견고한 논증 구성을 위한 구체적인 지침을 제공해주세요."
        ])
        
    else:
        builder.add_role(
            "논리적 추론 전문가", 
            f"{topic} 분야에서 체계적인 논리적 추론을 전문으로 하는 분석가로, 복잡한 문제를 명확한 논리 구조로 분석하고 평가하는 데 깊은 전문성을 갖고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 논리적 추론 과정을 체계적으로 "
            f"구조화하고 적용하는 방법을 배우고 싶습니다. 특히 복잡한 문제나 주장을 "
            f"논리적 단계로 분해하고, 명확한 추론 과정을 통해 견고한 결론에 도달하는 "
            f"접근법을 이해하고 싶습니다."
        )
        
        builder.add_instructions([
            f"{topic}에 관한 체계적인 논리적 추론 과정을 보여주세요",
            "다음과 같은 논리적 접근법으로 분석해주세요:",
            "1. 문제/주장 분석: 핵심 요소와 구조 파악",
            "2. 논리적 프레임워크 선택: 가장 적합한 추론 구조 선택",
            "3. 체계적 추론: 선택한 프레임워크에 따른 단계별 분석",
            "4. 가정 검토: 추론 과정에 내재된 가정 식별 및 검증",
            "5. 결론 도출: 논리적 과정에 기반한 견고한 결론 도출",
            "각 단계에서의 논리적 추론 과정을 명확히 보여주고, 사용된 논리적 원칙과 접근법을 설명해주세요."
        ])
    
    # 출력 형식 지정
    builder.add_format_instructions(
        f"응답은 {output_format} 형식으로 구성해주세요. "
        f"마크다운 형식을 사용하여 제목, 소제목, 논리적 단계 등을 명확히 구분해주세요. "
        f"각 추론 단계에서 적용된 논리적 원칙이나 규칙을 명시적으로 설명하고, "
        f"가정과 결론 사이의 논리적 연결 관계를 명확히 보여주세요. "
        f"필요한 경우 표, 트리 구조, 논리 다이어그램 등을 활용하여 논리 구조를 "
        f"시각적으로 표현해주세요. 복잡한 개념은 구체적 예시를 통해 설명하고, "
        f"다양한 관점이나 가능성을 균형 있게 고려해주세요."
    )
    
    return builder.build()

def main():
    """메인 함수"""
    # 실행 결과를 저장할 때 챕터별 폴더 구조를 사용
    run_exercise(
        title="논리적 추론 과정 유도하기",
        topic_options=LOGICAL_REASONING_TOPICS,
        get_basic_prompt=get_basic_prompt,
        get_enhanced_prompt=get_enhanced_prompt,
        prompt_summary=PROMPT_SUMMARY,
        learning_points=LEARNING_POINTS
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n프로그램이 사용자에 의해 중단되었습니다.")
    except Exception as err:
        print(f"\n오류 발생: {err}")
        print("API 키나 네트워크 연결을 확인하세요.")