"""
복잡한 문제 해결을 위한 사고 체인 실습 모듈

Part 7 - 섹션 7.2.1 실습 코드: 복잡한 문제 유형별 효과적인 사고 체인 프롬프팅 기법을
학습하고 다양한 사고 체인 구조화 방법을 실습합니다.
"""

import os
import sys
from typing import Dict, List, Any, Optional

# 상위 디렉토리를 경로에 추가하여 utils 모듈을 import할 수 있게 설정
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.append(project_root)

from utils.prompt_builder import PromptBuilder
from utils.exercise_template import run_exercise

# 주제 옵션 정의
COMPLEX_COT_TOPICS = {
    "1": {"name": "수학 및 논리 문제", "topic": "복잡한 수학/논리 문제의 단계적 해결", "output_format": "단계별 풀이"},
    "2": {"name": "의사결정 분석", "topic": "다기준 의사결정 문제의 체계적 분석", "output_format": "의사결정 분석서"},
    "3": {"name": "개념 분석", "topic": "복잡한 개념의 체계적 분석", "output_format": "개념 분석 리포트"},
    "4": {"name": "창의적 문제 해결", "topic": "혁신적 해결책 도출을 위한 사고 과정", "output_format": "아이디어 발전 과정"},
    "5": {"name": "사고 체인 구조화", "topic": "MECE 원칙과 프레임워크 기반 구조화", "output_format": "구조화 가이드"}
}

# 프롬프트 요약 정보
PROMPT_SUMMARY = {
    "basic": ["문제에 대한 일반적인 해결 요청"],
    "enhanced": [
        "단계적 사고 요청: 명시적인 사고 단계와 과정 요청",
        "메타인지적 요소: 사고 과정과 판단 근거 명시 요청",
        "구체적 구조화: 문제 유형에 맞는 체계적인 접근법 제안",
        "중간 과정 표시: 모든 중간 계산과 추론 과정 표시 요청"
    ]
}

# 학습 포인트
LEARNING_POINTS = [
    "복잡한 문제 해결에서 사고 체인(Chain of Thought) 프롬프팅은 정확성과 설명 가능성을 크게 향상시킵니다",
    "문제 유형(수학/논리, 의사결정, 개념 분석, 창의적 문제 등)에 따라 최적의 사고 체인 접근법이 다릅니다",
    "명시적 단계별 사고와 자기 질문 기반 사고는 복잡한 추론 과정을 체계화하는 효과적인 방법입니다",
    "MECE 원칙, 프레임워크 기반 구조화, 시각적 구조화 등은 사고 체인의 질을 높이는 강력한 도구입니다",
    "사고 과정에 메타인지적 모니터링을 통합하면 더 견고하고 균형 잡힌 결론에 도달할 수 있습니다"
]

def get_basic_prompt(topic: str) -> str:
    """기본 프롬프트 생성"""
    if "수학/논리" in topic:
        return """
다음 확률 문제를 풀어주세요:

주머니에 빨간 공 4개, 파란 공 3개, 녹색 공 2개가 있습니다. 이 주머니에서 임의로 3개의 공을 동시에 꺼낼 때, 
세 개 모두 다른 색의 공일 확률은 얼마인가요?
"""
    elif "의사결정" in topic:
        return """
다음 투자 의사결정 문제를 분석해주세요:

세 가지 투자 옵션이 있습니다:
- 옵션 A: 연 수익률 7%, 리스크 낮음, 유동성 높음, 5년 기간
- 옵션 B: 연 수익률 12%, 리스크 중간, 유동성 중간, 8년 기간
- 옵션 C: 연 수익률 18%, 리스크 높음, 유동성 낮음, 10년 기간

장기적 자산 성장을 원하는 투자자에게 어떤 옵션이 가장 적합할까요?
"""
    elif "개념 분석" in topic:
        return """
'인공지능 윤리'라는 개념을 분석해주세요. 이 개념의 주요 구성 요소, 중요성, 현재 논의되는 주요 이슈를 포함해주세요.
"""
    elif "창의적 문제" in topic:
        return """
도시 교통 혼잡 문제를 해결하기 위한 혁신적인 해결책을 제안해주세요.
"""
    elif "구조화" in topic:
        return """
신제품 출시 전략을 체계적으로 분석하는 방법을 설명해주세요.
"""
    else:
        return f"{topic}에 대해 체계적으로 분석해주세요."

def get_enhanced_prompt(topic: str, purpose: str, output_format: str) -> str:
    """향상된 프롬프트 생성"""
    builder = PromptBuilder()
    
    # 역할 및 맥락 설정
    if "수학/논리" in topic:
        builder.add_role(
            "수학 교육 전문가", 
            "학생들이 수학적 사고 과정을 체계적으로 발전시키는 방법을 가르치는 전문가로, 복잡한 수학 문제를 단계별로 명확하게 해결하는 방법론에 전문성을 갖추고 있습니다. 문제 해결 과정에서의 논리적 추론과 중간 단계 검증에 특히 중점을 두며, 학생들이 스스로 사고하는 능력을 개발하도록 돕는 접근법을 활용합니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 단순히 문제의 답을 구하는 것이 아니라, "
            f"복잡한 수학 및 논리 문제를 체계적으로 접근하고 해결하는 사고 과정을 배우고 싶습니다. "
            f"특히 단계별 추론 과정과 각 단계에서의 판단 근거를 명확히 이해하고 싶습니다."
        )
        
        builder.add_instructions([
            "다음 확률 문제를 단계별 사고 과정을 명확히 보여주며 해결해주세요: '주머니에 빨간 공 4개, 파란 공 3개, 녹색 공 2개가 있습니다. 이 주머니에서 임의로 3개의 공을 동시에 꺼낼 때, 세 개 모두 다른 색의 공일 확률은 얼마인가요?'",
            "다음 체계적인 접근법으로 풀이해주세요:",
            "1. 문제 이해 및 분석: 주어진 정보와 구하고자 하는 것을 명확히 정리",
            "2. 해결 전략 선택: 이 문제에 적용할 확률 개념과 접근법 설명",
            "3. 전체 경우의 수 계산: 주머니에서 3개의 공을 뽑는 모든 경우의 수",
            "4. 조건을 만족하는 경우의 수 계산: 세 개 모두 다른 색의 공이 나오는 경우의 수",
            "5. 확률 계산: 조건을 만족하는 경우의 수 / 전체 경우의 수",
            "6. 검증: 결과가 확률의 범위 내에 있는지, 계산은 정확한지 확인",
            "각 단계에서의 수학적 개념, 공식, 계산 과정을 모두 명시하고, 왜 그런 접근법을 선택했는지도 설명해주세요."
        ])
        
    elif "의사결정" in topic:
        builder.add_role(
            "의사결정 분석 전문가", 
            "복잡한 의사결정 상황을 체계적으로 분석하고 평가하는 전문가로, 다기준 의사결정 방법론, 리스크 분석, 민감도 분석 등에 깊은 전문성을 갖추고 있습니다. 정량적 분석과 정성적 평가를 통합하여 균형 잡힌 의사결정을 도출하는 프레임워크를 개발하고 적용하는 데 전문화되어 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 비즈니스 학생입니다. 여러 기준과 트레이드오프가 얽힌 "
            f"복잡한 의사결정 문제를 체계적으로 분석하고, 합리적인 결론에 도달하는 과정을 "
            f"배우고 싶습니다. 특히 객관적 데이터와 주관적 선호도를 균형 있게 통합하는 "
            f"의사결정 프로세스에 관심이 있습니다."
        )
        
        builder.add_instructions([
            "다음 투자 의사결정 문제를 체계적인 사고 체인으로 분석해주세요: '세 가지 투자 옵션이 있습니다: - 옵션 A: 연 수익률 7%, 리스크 낮음, 유동성 높음, 5년 기간 - 옵션 B: 연 수익률 12%, 리스크 중간, 유동성 중간, 8년 기간 - 옵션 C: 연 수익률 18%, 리스크 높음, 유동성 낮음, 10년 기간. 장기적 자산 성장을 원하는 투자자에게 어떤 옵션이 가장 적합할까요?'",
            "다음 구조화된 의사결정 분석 프레임워크로 접근해주세요:",
            "1. 의사결정 맥락 및 목표 정의: 투자자의 목표와 제약 조건 명확화",
            "2. 평가 기준 설정: 의사결정에 중요한 핵심 기준 식별 및 우선순위화",
            "3. 대안 분석: 각 투자 옵션을 모든 기준에 따라 체계적으로 평가",
            "4. 비교 분석: 옵션 간 트레이드오프 분석 및 시각화",
            "5. 민감도 분석: 주요 가정이나 우선순위 변화에 따른 결과 변화 검토",
            "6. 최종 권장사항: 분석 결과에 기반한 최적 투자 옵션 제안 및 근거 제시",
            "각 단계에서의 분석 과정과 판단 근거를 명확히 설명하고, 표나 매트릭스를 활용해 비교 결과를 시각화해주세요."
        ])
        
    elif "개념 분석" in topic:
        builder.add_role(
            "개념 분석 전문가", 
            "복잡한 개념과 아이디어를 체계적으로 분석하고 명확히 하는 전문가로, 학제간 연구와 개념적 매핑에 전문성을 갖추고 있습니다. 추상적 개념을 핵심 요소로 분해하고, 다양한 이론적 렌즈를 통해 검토하며, 개념 간 관계와 경계를 명확히 하는 방법론을 개발하고 적용합니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 복잡한 개념을 체계적으로 분석하여 "
            f"더 깊고 명확한 이해에 도달하는 방법을 배우고 싶습니다. 특히 다양한 "
            f"관점과 이론적 프레임워크를 통해 개념을 다각도로 검토하고, 그 구성 요소와 "
            f"함의를 체계적으로 파악하는 과정에 관심이 있습니다."
        )
        
        builder.add_instructions([
            "'인공지능 윤리'라는 개념을 체계적인 사고 체인으로 분석해주세요",
            "다음과 같은 개념 분석 프레임워크로 접근해주세요:",
            "1. 개념 정의 및 경계: '인공지능 윤리'의 기본 정의와 범위 설정",
            "2. 구성 요소 분해: 개념을 구성하는 핵심 요소와 하위 개념 식별",
            "3. 역사적/맥락적 발전: 개념의 역사적 발전과 현재 맥락 분석",
            "4. 이론적 프레임워크: 개념을 이해하는 다양한 이론적 관점 검토",
            "5. 관련 개념과의 관계: 유사하거나 관련된 개념과의 비교 및 관계 분석",
            "6. 실제 적용과 사례: 개념이 현실 세계에 적용되는 방식과 사례 검토",
            "7. 비판적 평가: 개념의 강점, 한계, 모순, 쟁점 분석",
            "8. 통합적 이해: 분석을 통합한 개념의 종합적 이해 제시",
            "각 분석 단계에서의 사고 과정을 명확히 보여주고, 개념 맵이나 표를 활용해 개념의 구조와 관계를 시각화해주세요."
        ])
        
    elif "창의적 문제" in topic:
        builder.add_role(
            "창의적 문제 해결 전문가", 
            "혁신적인 아이디어 개발과 창의적 문제 해결 프로세스를 설계하고 촉진하는 전문가로, 디자인 씽킹, 수평적 사고, 창의적 발상법 등 다양한 창의성 기법에 깊은 전문성을 갖추고 있습니다. 복잡한 문제에 대한 혁신적 접근법을 개발하고, 아이디어를 체계적으로 발전시키는 프로세스를 설계하는 데 특화되어 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 복잡한 문제에 대한 창의적이고 혁신적인 "
            f"해결책을 체계적으로 개발하는 사고 과정을 배우고 싶습니다. 특히 다양한 "
            f"관점에서 문제를 재정의하고, 광범위한 가능성을 탐색하며, 혁신적 아이디어를 "
            f"구체화하는 단계적 접근법에 관심이 있습니다."
        )
        
        builder.add_instructions([
            "도시 교통 혼잡 문제를 해결하기 위한 혁신적인 해결책을 개발하는 과정을 체계적인 사고 체인으로 보여주세요",
            "다음과 같은 창의적 문제 해결 프레임워크로 접근해주세요:",
            "1. 문제 탐색: 도시 교통 혼잡의 다양한 측면, 원인, 영향 분석",
            "2. 문제 재정의: 다양한 관점에서 문제를 재구성하는 방법 탐색",
            "3. 기회 영역 식별: 혁신 가능성이 높은 핵심 기회 영역 도출",
            "4. 아이디어 생성: 다양한 해결책에 대한 광범위한 브레인스토밍",
            "5. 아이디어 분류: 제안된 아이디어의 패턴화 및 유형화",
            "6. 컨셉 발전: 가장 유망한 아이디어 선택 및 구체적 컨셉으로 발전",
            "7. 해결책 구체화: 선택된 해결책의 세부 요소와 작동 방식 설계",
            "8. 구현 고려사항: 실현 가능성, 장애물, 구현 전략 검토",
            "각 단계에서의 창의적 사고 과정을 상세히 보여주고, 다양한 관점과 혁신적 아이디어를 충분히 탐색해주세요. 아이디어 발전 과정과 최종 해결책의 혁신성을 강조해주세요."
        ])
        
    elif "구조화" in topic:
        builder.add_role(
            "사고 구조화 전문가", 
            "복잡한 문제를 체계적으로 분석하고 구조화하는 전문가로, MECE 원칙, 프레임워크 기반 분석, 시각적 구조화 등 다양한 사고 구조화 기법에 깊은 전문성을 갖추고 있습니다. 특히 비즈니스 컨설팅, 전략 분석, 의사결정 분야에서 복잡한 문제를 명확한 구조로 분해하고 분석하는 방법론을 개발하고 적용합니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 비즈니스 학생입니다. 복잡한 비즈니스 문제를 "
            f"체계적으로 구조화하여 명확하고 종합적인 분석에 도달하는 방법을 배우고 싶습니다. "
            f"특히 MECE(상호배타적이고 총체적으로 망라하는) 원칙과 프레임워크 기반 분석을 "
            f"효과적으로 적용하는 방법에 관심이 있습니다."
        )
        
        builder.add_instructions([
            "신제품 출시 전략을 MECE 원칙과 프레임워크 기반 접근법으로 체계적으로 분석하는 과정을 보여주세요",
            "다음과 같은 구조화된 접근법으로 분석해주세요:",
            "1. MECE 구조화: 신제품 출시 전략을 MECE 원칙에 따라 핵심 범주로 분류",
            "   - 제품 전략 (제품 특성, 포지셔닝, 차별화 등)",
            "   - 가격 전략 (가격 책정, 수익 모델, 가치 제안 등)",
            "   - 유통 전략 (채널, 파트너십, 공급망 등)",
            "   - 프로모션 전략 (마케팅, 커뮤니케이션, 브랜딩 등)",
            "   - 타이밍 전략 (출시 일정, 단계적 접근 등)",
            "2. 각 범주 내에서 하위 요소를 MECE 방식으로 세분화",
            "3. 프레임워크 적용: 각 범주에 적합한 비즈니스 프레임워크 선택 및 적용",
            "4. 통합 분석: 모든 요소를 포괄하는 종합적 출시 전략 개발",
            "5. 우선순위화: 핵심 성공 요소와 우선 순위 식별",
            "각 단계에서 MECE 원칙을 어떻게 적용하는지, 프레임워크를 어떻게 선택하고 활용하는지 명확히 설명해주세요. 표나 다이어그램을 활용해 분석 구조를 시각화해주세요."
        ])
        
    else:
        builder.add_role(
            "사고 체인 전문가", 
            f"{topic} 분야에서 체계적인 사고 체인을 개발하고 적용하는 전문가로, 복잡한 문제를 명확한 단계로 분해하고 논리적 추론 과정을 통해 해결하는 방법론에 전문성을 갖추고 있습니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있는 학생입니다. 복잡한 문제를 체계적으로 접근하고, "
            f"명확한 사고 과정을 통해 해결하는 방법을 배우고 싶습니다. 특히 단계별 추론 과정과 "
            f"각 단계에서의 판단 근거를 명확히 이해하고 싶습니다."
        )
        
        builder.add_instructions([
            f"{topic}을 체계적인 사고 체인으로 분석해주세요",
            "다음과 같은 단계적 접근법으로 분석해주세요:",
            "1. 문제/주제 이해: 핵심 요소와 목표 명확화",
            "2. 분석 전략 선택: 적합한 접근법과 프레임워크 선택",
            "3. 체계적 분석: 선택한 접근법에 따른 단계별 분석",
            "4. 중간 결과 검토: 각 단계의 결과 평가 및 검증",
            "5. 통합 및 결론: 분석 결과 통합 및 최종 결론 도출",
            "각 단계에서의 사고 과정과 판단 근거를 명확히 설명하고, 중간 결과와 추론 과정을 모두 표시해주세요."
        ])
    
    # 출력 형식 지정
    builder.add_format_instructions(
        f"응답은 {output_format} 형식으로 구성해주세요. "
        f"마크다운 형식을 사용하여 제목, 소제목, 단계별 구분 등을 명확히 표시해주세요. "
        f"각 단계에서의 사고 과정과 추론을 명시적으로 보여주고, 중간 결과와 계산 과정을 모두 포함해주세요. "
        f"필요한 경우 표, 다이어그램, 매트릭스 등의 시각적 요소를 활용하여 분석 과정을 더 명확히 해주세요. "
        f"각 단계에서 어떤 개념이나 원칙을 적용했는지, 왜 특정 접근법을 선택했는지에 대한 "
        f"메타인지적 설명도 포함해주세요."
    )
    
    return builder.build()

def main():
    """메인 함수"""
    # 실행 결과를 저장할 때 챕터별 폴더 구조를 사용
    run_exercise(
        title="복잡한 문제 해결을 위한 사고 체인",
        topic_options=COMPLEX_COT_TOPICS,
        get_basic_prompt=get_basic_prompt,
        get_enhanced_prompt=get_enhanced_prompt,
        prompt_summary=PROMPT_SUMMARY,
        learning_points=LEARNING_POINTS
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n프로그램이 사용자에 의해 중단되었습니다.")
    except Exception as err:
        print(f"\n오류 발생: {err}")
        print("API 키나 네트워크 연결을 확인하세요.")