"""
프롬프트 패턴 결합하기 실습 모듈

Part 7 - 섹션 7.4 실습 코드: 다양한 프롬프트 패턴을 전략적으로 결합하고 고급 워크플로우를 설계하는 방법을 학습합니다.
"""

import os
import sys
from typing import Dict, List, Any, Optional

# 상위 디렉토리를 경로에 추가하여 utils 모듈을 import할 수 있게 설정
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.append(project_root)

from utils.prompt_builder import PromptBuilder
from utils.exercise_template import run_exercise

# 주제 옵션 정의
PROMPT_PATTERNS_TOPICS = {
    "1": {"name": "복잡한 분석 전략", "topic": "여러 패턴을 결합한 심층 분석 워크플로우", "output_format": "분석 프레임워크"},
    "2": {"name": "창의적 개발 과정", "topic": "아이디어 발상부터 구체화까지의 패턴 결합 워크플로우", "output_format": "개발 가이드"},
    "3": {"name": "학기 프로젝트 관리", "topic": "복잡한 학기 프로젝트를 위한 통합 프롬프트 전략", "output_format": "프로젝트 가이드"},
    "4": {"name": "의사결정 프레임워크", "topic": "다차원 분석과 평가를 결합한 의사결정 워크플로우", "output_format": "의사결정 도구"},
    "5": {"name": "학습 및 지식 구축", "topic": "효과적인 학습을 위한 다단계 프롬프트 패턴 통합", "output_format": "학습 시스템"}
}

# 프롬프트 요약 정보
PROMPT_SUMMARY = {
    "basic": ["주제에 대한 일반적인 정보 요청"],
    "enhanced": [
        "역할 통합: 여러 전문가 관점의 전략적 결합",
        "프로세스 구조화: 단계별 진행과 정보 전달 설계",
        "다차원 분석: 여러 분석 패턴의 통합적 적용",
        "맥락 관리: 복잡한 정보의 효과적인 유지 및 전달"
    ]
}

# 학습 포인트
LEARNING_POINTS = [
    "단일 패턴보다 전략적으로 결합된 패턴이 복잡한 과제에 더 효과적입니다",
    "패턴 간의 시너지를 활용하면 각 패턴의 강점은 극대화하고 약점은 보완할 수 있습니다",
    "체계적인 워크플로우 설계는 복잡한 프로젝트의 일관성과 품질을 보장합니다",
    "효과적인 맥락 관리와 정보 전달이 성공적인 패턴 결합의 핵심입니다"
]

def get_basic_prompt(topic: str) -> str:
    """기본 프롬프트 생성"""
    return f"{topic}에 대해 설명해주세요."

def get_enhanced_prompt(topic: str, purpose: str, output_format: str) -> str:
    """향상된 프롬프트 생성"""
    builder = PromptBuilder()
    
    # 주제별 맞춤 역할 및 맥락 설정
    if "분석 전략" in topic:
        builder.add_role(
            "고급 분석 시스템 설계자", 
            "복잡한 주제와 문제를 심층적으로 분석하기 위해 다양한 프롬프트 패턴을 전략적으로 통합하는 전문가입니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있습니다. "
            f"다차원적이고 복잡한 주제나 문제를 체계적으로 분석하기 위해 여러 프롬프트 패턴을 효과적으로 "
            f"결합하는 방법을 배우고 싶습니다. 특히 다양한 관점, 분석 프레임워크, 비판적 사고 방법을 "
            f"통합적으로 적용하여 더 깊은 통찰을 얻는 워크플로우를 설계하고자 합니다."
        )
        
        builder.add_instructions([
            "복잡한 주제 분석을 위한 다양한 프롬프트 패턴(역할 기반, 단계적 사고, 다면적 분석 등)과 각각의 강점을 설명해주세요",
            "이러한 패턴들을 효과적으로 결합하여 시너지를 창출하는 원칙과 전략을 제시해주세요",
            "분석 워크플로우의 주요 단계, 각 단계에 적합한 패턴 조합, 단계 간 연결 메커니즘을 설명해주세요",
            "체계적이고 재사용 가능한 심층 분석 프레임워크를 마크다운 형식으로 제공해주세요",
            "다양한 분석 상황(학술 연구, 비즈니스 분석, 복잡한 현상 이해 등)에 적용할 수 있는 구체적인 예시와 변형을 포함해주세요"
        ])
        
    elif "창의적 개발" in topic:
        builder.add_role(
            "창의적 프로세스 설계자", 
            "아이디어 발상부터 구체적 결과물 개발까지 전체 창의적 과정을 최적화하기 위해 다양한 프롬프트 패턴을 전략적으로 통합하는 전문가입니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있습니다. "
            f"초기 아이디어 발상부터 구체적인 개발 및 정제까지 창의적 과정 전반을 체계적으로 지원하는 "
            f"프롬프트 패턴 결합 방법을 배우고 싶습니다. 자유로운 발상과 체계적인 개발 사이의 균형을 "
            f"유지하면서 창의적 결과물의 품질과 독창성을 높이는 워크플로우를 설계하고자 합니다."
        )
        
        builder.add_instructions([
            "창의적 개발 과정의 다양한 단계(발상, 선택, 구체화, 개선 등)와 각 단계에 적합한 프롬프트 패턴을 설명해주세요",
            "창의성과 구조적 접근 사이의 균형을 유지하면서 패턴을 효과적으로 결합하는 전략을 제시해주세요",
            "아이디어 발상부터 최종 결과물까지의 전체 워크플로우, 각 단계별 최적의 패턴 조합, 단계 간 전환 방법을 설명해주세요",
            "재사용 가능하고 다양한 창의적 과제에 적용할 수 있는 개발 가이드를 마크다운 형식으로 제공해주세요",
            "제품 개발, 콘텐츠 창작, 문제 해결 등 다양한 창의적 상황에 적용할 수 있는 구체적인 예시와 변형을 포함해주세요"
        ])
        
    elif "학기 프로젝트" in topic:
        builder.add_role(
            "학술 프로젝트 워크플로우 전문가", 
            "복잡한 학기 프로젝트의 계획, 실행, 완성까지 전체 과정을 최적화하기 위해 다양한 프롬프트 패턴을 전략적으로 통합하는 전문가입니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있습니다. "
            f"연구, 분석, 창작, 보고서 작성 등 다양한 활동이 포함된 복잡한 학기 프로젝트를 "
            f"효과적으로 계획하고 실행하기 위한 통합적인 프롬프트 전략을 배우고 싶습니다. "
            f"특히 장기 프로젝트의 맥락을 유지하고 일관된 품질을 보장하는 워크플로우를 설계하고자 합니다."
        )
        
        builder.add_instructions([
            "학기 프로젝트의 다양한 단계(계획, 연구, 개발, 통합, 완성)와 각 단계에 적합한 프롬프트 패턴 조합을 설명해주세요",
            "장기 프로젝트의 맥락을 효과적으로 유지하고 일관성을 확보하는 전략과 메커니즘을 제시해주세요",
            "다양한 유형의 학기 프로젝트(연구 논문, 창작 포트폴리오, 설계 프로젝트 등)에 맞게 조정 가능한 워크플로우를 설명해주세요",
            "체계적이고 재사용 가능한 학기 프로젝트 관리 가이드를 마크다운 형식으로 제공해주세요",
            "프로젝트 단계별 최적의 패턴 활용법, 효과적인 맥락 전달, 품질 관리 전략을 구체적인 예시와 함께 포함해주세요"
        ])
        
    elif "의사결정" in topic:
        builder.add_role(
            "의사결정 시스템 설계자", 
            "복잡한 의사결정 상황을 체계적으로 분석하고 최적의 결정을 도출하기 위해 다양한 프롬프트 패턴을 전략적으로 통합하는 전문가입니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있습니다. "
            f"여러 요소와 이해관계를 고려해야 하는 복잡한 의사결정 상황에서 "
            f"체계적이고 균형 잡힌 접근법을 개발하고 싶습니다. 특히 다양한 요소를 "
            f"객관적으로 평가하고 불확실성을 관리하는 통합적인 워크플로우를 설계하고자 합니다."
        )
        
        builder.add_instructions([
            "의사결정 과정의 다양한 단계(맥락 정의, 옵션 탐색, 평가, 선택, 검증)와 각 단계에 적합한 프롬프트 패턴을 설명해주세요",
            "객관성, 균형성, 종합적 관점을 보장하기 위해 다양한 패턴을 효과적으로 결합하는 전략을 제시해주세요",
            "불확실성, 위험, 다중 기준 상황에서 의사결정의 품질을 높이는 프롬프트 워크플로우를 설명해주세요",
            "다양한 의사결정 상황에 적용할 수 있는 체계적인 의사결정 도구를 마크다운 형식으로 제공해주세요",
            "개인적 선택, 비즈니스 결정, 전략적 판단 등 다양한 맥락에서의 적용 방법을 구체적인 예시와 함께 포함해주세요"
        ])
        
    elif "학습 및 지식" in topic:
        builder.add_role(
            "학습 시스템 설계자", 
            "복잡한 주제나 영역에 대한 체계적인 학습과 지식 구축을 최적화하기 위해 다양한 프롬프트 패턴을 전략적으로 통합하는 전문가입니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있습니다. "
            f"새로운 분야나 복잡한 주제를 효과적으로 학습하고 체계적인 지식을 구축하는 과정을 "
            f"최적화하는 방법을 배우고 싶습니다. 특히 기초 이해부터 심화 응용까지 단계적으로 "
            f"지식을 발전시키는 통합적인 워크플로우를 설계하고자 합니다."
        )
        
        builder.add_instructions([
            "체계적인 학습 과정의 다양한 단계(영역 매핑, 기초 구축, 심화 탐구, 통합, 응용)와 각 단계에 적합한 프롬프트 패턴을 설명해주세요",
            "이해, 기억, 응용, 비판적 사고 등 다양한 학습 목표를 지원하는 패턴 결합 전략을 제시해주세요",
            "다양한 학습 스타일과 주제 유형에 맞게 조정 가능한 학습 워크플로우를 설명해주세요",
            "새로운 분야나 복잡한 주제를 효과적으로 학습하기 위한 체계적인 시스템을 마크다운 형식으로 제공해주세요",
            "학습 단계별 최적의 패턴 활용법, 지식 통합 전략, 장기적 기억 및 응용 방법을 구체적인 예시와 함께 포함해주세요"
        ])
        
    else:
        builder.add_role(
            "프롬프트 패턴 통합 전문가", 
            "다양한 프롬프트 패턴을 목적에 맞게 전략적으로 결합하여 복잡한 과제를 효과적으로 해결하는 전문가입니다."
        )
        
        builder.add_context(
            f"저는 {topic}에 관심이 있습니다. "
            f"다양한 프롬프트 패턴(역할 기반, 단계적 사고, 다면적 분석 등)을 효과적으로 결합하여 "
            f"복잡한 과제와 문제를 더 체계적이고 종합적으로 접근하는 방법을 배우고 싶습니다. "
            f"특히 각 패턴의 강점을 활용하고 약점을 보완하는 시너지를 창출하는 전략에 관심이 있습니다."
        )
        
        builder.add_instructions([
            "다양한 프롬프트 패턴의 핵심 특성과 각각의 강점 및 약점을 설명해주세요",
            "패턴들을 효과적으로 결합하여 시너지를 창출하는 원칙과 전략을 제시해주세요",
            "다양한 과제 유형에 적용할 수 있는 통합 워크플로우 설계 방법과 구성 요소를 설명해주세요",
            "재사용 가능하고 다양한 상황에 맞게 조정할 수 있는 패턴 결합 프레임워크를 마크다운 형식으로 제공해주세요",
            "분석, 창작, 의사결정, 학습 등 다양한 맥락에서의 패턴 결합 적용 방법을 구체적인 예시와 함께 포함해주세요"
        ])
    
    # 출력 형식 지정
    builder.add_format_instructions(
        f"응답은 {output_format} 형식으로 구성해주세요. "
        f"마크다운 형식을 사용하여 다음 요소를 효과적으로 활용해주세요:\n\n"
        f"1. 명확한 제목 계층 구조 (##, ###, ####)\n"
        f"2. 글머리 기호와 번호 매기기를 적절히 활용한 목록\n"
        f"3. 표를 사용한 정보 비교 및 구조화\n"
        f"4. 인용문(>)을 활용한 중요 포인트 강조\n"
        f"5. 코드 블록을 활용한 프롬프트 템플릿 및 예시\n"
        f"6. 굵은 글씨와 기울임체를 활용한 강조\n\n"
        f"다음 섹션을 포함해주세요:\n"
        f"1. 개요: 주요 패턴과 이들의 결합 원리 소개\n"
        f"2. 워크플로우 구조: 단계별 접근법과 각 단계에 적합한 패턴 조합\n"
        f"3. 패턴 결합 전략: 효과적인 통합과 시너지 창출 방법\n"
        f"4. 맥락 관리: 복잡한 워크플로우에서 맥락과 일관성 유지 방법\n"
        f"5. 실용적 템플릿: 재사용 가능한 프롬프트 패턴 조합 템플릿\n"
        f"6. 적용 예시: 다양한 상황에서의 구체적 활용 방법\n\n"
        f"각 섹션에서 이론적 설명과 실제 적용 방법을 균형있게 제공하고, 다양한 상황에 맞게 조정할 수 있는 "
        f"유연성을 갖춘 프레임워크를 제시해주세요. 구체적인 프롬프트 템플릿, 변수, 조건부 요소를 포함하여 "
        f"즉시 활용 가능한 실용적인 가이드를 제공해주세요."
    )
    
    return builder.build()

def main():
    """메인 함수"""
    # 실행 결과를 저장할 때 챕터별 폴더 구조를 사용
    run_exercise(
        title="프롬프트 패턴 결합하기",
        topic_options=PROMPT_PATTERNS_TOPICS,
        get_basic_prompt=get_basic_prompt,
        get_enhanced_prompt=get_enhanced_prompt,
        prompt_summary=PROMPT_SUMMARY,
        learning_points=LEARNING_POINTS
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n프로그램이 사용자에 의해 중단되었습니다.")
    except Exception as err:
        print(f"\n오류 발생: {err}")
        print("API 키나 네트워크 연결을 확인하세요.")